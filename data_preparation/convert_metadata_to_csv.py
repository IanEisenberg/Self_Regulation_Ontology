#!/usr/bin/env python3
"""
load metadata generated by prepare_metadata.py
and convert to CSV for arizona group

save separate files for measure-level and item-level

"""


import json,re
import pandas
from selfregulation.utils.utils import get_behav_data,get_info

variable_lookup=pandas.read_csv('../references/variable_name_lookup.csv',
                                index_col=0,header=0)
metadata=json.load(open('metadata.json','r'))

measure_level_data=[]
item_level_data=[]
outcome_data=[]

for k in metadata:
    m=metadata[k]
    for e in m['dataElements']:
        if m['measureType']=='outcomes':
            for item in m['dataElements'][e]:
                resps=[]
                for r in item['responseOptions']:
                    resps.append('%s:%s'%(r,re.sub(r'[^\w\s]','',item['responseOptions'][r]['text'])))
                if not 'scoring' in item:
                    item['scoring']=''
                outcome_data.append([item['expFactoryName'],
                            m['title'],
                            re.sub(r'[^\w\s]','',item['text']).lstrip().replace('\n',' '),
                            item['scoring'],
                            ';'.join(resps)])
        elif e=='surveyItems':
            for item in m['dataElements'][e]:
                resps=[]
                for r in item['responseOptions']:
                    if isinstance(item['responseOptions'][r]['text'],list):
                        rops='/'.join([re.sub(r'[^\w\s]','',t) for t in item['responseOptions'][r]['text']])
                    else:
                        rops=re.sub(r'[^\w\s]','',item['responseOptions'][r]['text'])
                    resps.append('%s:%s'%(r,rops))
                item_level_data.append([item['expFactoryName'],
                            m['title'],
                            item['question_num'],
                            re.sub(r'[^\w\s]','',item['text']),
                            item['scoring'],
                            ';'.join(resps)])

        else:
            vname='%s.%s'%(k,e)
            try:
                shortname=variable_lookup.loc[vname]['Short Name']
            except:
                shortname=''
                print('no short name for',e)
            if 'subscaleVarNums' in m['dataElements'][e]:
                varNums=m['dataElements'][e]['subscaleVarNums']
            else:
                varNums=''
            if k=='eating_survey':
                varNums='custom(%s)'%varNums
            measure_level_data.append([vname,shortname,
                                    m['title'],m['dataElements'][e]['title'],
                                    m['measureType'],varNums])


measure_level_df=pandas.DataFrame(measure_level_data,
    columns=['ExpFactoryName','ShortName','MeasureName','VariableName',
                'MeasureType','SubscaleVarNums'])
# doublecheck that all meaningful variables are here
dataset=get_info('dataset')
behavdata=get_behav_data(dataset)
measurevars=measure_level_df.ExpFactoryName.tolist()
for v in behavdata.columns:
    assert v in measurevars
measure_level_df.to_csv('meaningful_variables_metadata.csv',index=False)

#save item level data
item_level_df=pandas.DataFrame(item_level_data,
    columns=['ExpFactoryName','MeasureName','QuestionNumber',
    'QuestionText','Scoring','ResponseOptions'])
item_level_df.to_csv('item_level_metadata.csv',index=False)

outcome_df=pandas.DataFrame(outcome_data,
    columns=['ExpFactoryName','MeasureName',
    'QuestionText','Scoring','ResponseOptions'])
outcome_df.to_csv('outcome_metadata.csv',index=False)
